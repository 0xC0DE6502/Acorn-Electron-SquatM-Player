;SquatM beeper music engine
;Originally written by Shiru 06'17 for ZX Spectrum 48K
;Ported to Atari 8-bit by Shiru 07'21
;Ported to the Acorn Electron by Negative Charge 11'22
;Optimisations of the Acorn Electron version by 0xC0DE 11'22

SHEILA_COUNTER          = &FE06
SHEILA_MISC_CONTROL     = &FE07
OSBYTE                  = &FFF4
OSWRCH                  = &FFEE

SPEAKER_OFF             = %10100001 ; =SPEAKER_ON-1 (!)
SPEAKER_ON              = %10100010

OP_NOP                  = &EA
OP_ROL_A                = &2A

CYCLES                  = 39                                ;39 calibrated with "let's go" track (Original: 02:10.0. Electron: 02:11.3)
COUNT                   = (((120 + 37) * 2 * CYCLES) / 56)  ;56c noise_loop, 120+37=157c sound_loop. Noise duration, twice as long as inner sound loop

ORG     $00
GUARD   $9f

.vars_start

.pattern_ptr                            SKIP 2
.sample_ptr                             SKIP 2
.sample_mask                            SKIP 1        ;&00 or &80
.sample_bit                             SKIP 1
.sample_out                             SKIP 1
.row_length                             SKIP 1
.row_flags                              SKIP 1
.ch0_acc                                SKIP 2
.ch1_acc                                SKIP 2
.ch2_acc                                SKIP 2
.ch3_acc                                SKIP 2
.ch_mixer                               SKIP 1
.ch_acc                                 SKIP 1
.noise_acc                              SKIP 2
.noise_add_hi                           SKIP 1
.noise_pitch                            SKIP 1
.noise_volume                           SKIP 1
.temp                                   SKIP 1

.temp_y                                 SKIP 1

.vars_end

ORG     &E00
GUARD   &5800

.start

    lda     #143
    ldx     #12
    ldy     #$FF
    jsr     OSBYTE             ;Claim NMI

    lda     #$40
    sta     $D00               ;Store RTI as NMI routine

    lda     #163
    ldx     #128
    ldy     #1
    jsr     OSBYTE             ;Disable printer and ADCs

    lda     #0
    sta     $2B2               ;Clear type byte for ROM 12 (Plus 1) in Paged ROM type table

    lda     #$0F               ;Flush selected wait class
    ldx     #$00               ;All waits flushed
    jsr     OSBYTE

    sei                        ;Disable interrupts

    lda     #$00
    sta     SHEILA_COUNTER     ;Zero the ULA SHEILA counter (FE06), creating a toggle speaker (inaudible frequency)
    tax
.clear_vars
    sta     vars_start,x
    inx
    cpx     #vars_end-vars_start
    bne     clear_vars

    lda     #LO(music_data+2)
    sta     pattern_ptr+0
    lda     #HI(music_data+2)
    sta     pattern_ptr+1
    bne     play_loop          ;jump always

.return_loop
    lda     music_data+0
    sta     pattern_ptr+0
    lda     music_data+1
    sta     pattern_ptr+1

.play_loop

    ldy     #0
    lda     (pattern_ptr),y    ;flags DDDN4321 (Drum, Noise, 1-4 channel update)
    sta     row_flags
    iny
    lda     (pattern_ptr),y    ;duration of the row (0=loop), bit 7 percussion
    beq     return_loop
    
    sta     row_length
    iny
    
    lsr     row_flags
    bcc     skip_note_0
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch0_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch0_add1+1
    
.skip_note_0

    lsr     row_flags
    bcc     skip_note_1
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch1_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch1_add1+1

.skip_note_1

    lsr     row_flags
    bcc     skip_note_2
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch2_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch2_add1+1

.skip_note_2

    lsr     row_flags
    bcc     skip_note_3
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch3_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch3_add1+1

.skip_note_3

    lsr     row_flags
    bcc     skip_mode_change

    ldx     #OP_NOP
    lda     (pattern_ptr),y
    beq     L4
    ldx     #OP_ROL_A
.L4
    stx     noise_opcode+0
    iny
    iny
    
.skip_mode_change

    ldx     row_flags
    beq     skip_drum
    lda     sample_list_lo-1,x
    sta     sample_ptr+0
    lda     sample_list_hi-1,x
    sta     sample_ptr+1
    lda     #$80
    sta     sample_mask

.skip_drum

    lda     row_length
    bpl     skip_percussion
    
    and     #$7f                   ;clear percussion flag
    sta     row_length

    lda     (pattern_ptr),y        ;read noise volume
    iny
    sta     noise_volume
    
    lda     (pattern_ptr),y        ;read noise pitch
    iny

    sty     temp_y

    sta     noise_pitch
    tay                            ;used to be noise_div
    
    lda     #<2174                 ;utz's rand seed
    sta     noise_acc+0
    lda     #>2174
    sta     noise_add_hi
    sta     noise_acc+1
    ldx     #COUNT

; -- 37+14+5 = 56c -------------------------------------------------------------------------------------------

.noise_loop

    dey                            ;2
    beq     noise_update           ;2/3
    ;~5

.noise_skip

    FOR n, 1, 6
      rol temp                     ;5 dummy
    NEXT
    jmp     noise_next             ;3
    ; 2+2+6*5+3 = 37c
    
.noise_update

    lda     noise_acc+0            ;3
    adc     #<2174                 ;2 // utz's rand seed
    sta     noise_acc+0            ;3
    lda     noise_acc+1            ;3
    adc     noise_add_hi           ;3
    cmp     #$80                   ;2
    rol     a                      ;2
    sta     noise_acc+1            ;3
    inc     noise_add_hi           ;5
    ldy     noise_pitch            ;3
    ;32c // 2+3+32 = 37c
    
.noise_next

    lda     noise_volume           ;3
    cmp     noise_acc+1            ;3 C=0 --> sound off, C=1 --> sound on
    lda     #SPEAKER_OFF           ;2
    adc     #0                     ;2
    sta     SHEILA_MISC_CONTROL    ;4
    ;14c

    dex                            ;2
    bne     noise_loop             ;2/3
    ;~5c

; ------------------------------------------------------------------------------------------------

    ldy     temp_y

.skip_percussion

    tya
    clc
    adc     pattern_ptr+0
    sta     pattern_ptr+0
    bcc     L8
    inc     pattern_ptr+1
.L8
    lda     sample_mask
    sta     sample_bit

.sound_loop_0

    ldx     #CYCLES
    ldy     #0                    ;sample ptr inside the loop

 ; -- (37c)+120c ------------------------------------------------------------------------------------------  

.sound_loop

    lda     (sample_ptr),y        ;5+ // it's okay if sample_ptr is not valid
    and     sample_bit            ;3    
    beq     spkr_off              ;2/3
    lda     #SPEAKER_ON           ;2
    bne     spkr_set              ;3 jump always
.spkr_off
    lda     #SPEAKER_OFF          ;2
.spkr_set
    sta     sample_out            ;3
    ;16

    lda     sample_mask           ;3 preload
    lsr     sample_bit            ;5
    lsr     sample_bit            ;5 drop every other sample bit!
    beq     sample_inc            ;2/3
    sta     temp                  ;3 dummy
    bne     sample_next           ;3 jump always
.sample_inc
    sta     sample_bit            ;3
    iny                           ;2
.sample_next
    ;16
    ;16+16=32
    lda     #0                    ;2
    sta     ch_mixer              ;3
    ;5

    lda     ch0_acc+0             ;3
.sm_ch0_add0
    adc     #0                    ;2 selfmod
    sta     ch0_acc+0             ;3
    lda     ch0_acc+1             ;3
.sm_ch0_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    sta     ch0_acc+1             ;3
    ;21
    
    lda     ch1_acc+0             ;3
.sm_ch1_add0
    adc     #0                    ;2 selfmod
    sta     ch1_acc+0             ;3
    lda     ch1_acc+1             ;3
.sm_ch1_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    sta     ch1_acc+1             ;3
    ;21
    
    lda     ch2_acc+0             ;3
.sm_ch2_add0
    adc     #0                    ;2 selfmod
    sta     ch2_acc+0             ;3
    lda     ch2_acc+1             ;3
.sm_ch2_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    sta     ch2_acc+1             ;3
    ;21

    lda     ch3_acc+0             ;3
.sm_ch3_add0
    adc     #0                    ;2 selfmod
    sta     ch3_acc+0             ;3
    lda     ch3_acc+1             ;3
.sm_ch3_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    cmp     #$80                  ;2 needed for rol a, to match Z80's srl h
    ;20

.noise_opcode
    nop                           ;2 nop or rol a, self-modifying code here!
    sta     ch3_acc+1             ;3
    ;5
    
    ;(37)+5+21+21+21+20+5 = (37)+93

    lda     ch_acc                ;3
    clc                           ;2
    adc     ch_mixer              ;3
    bne     speaker_on            ;2/3
    nop                           ;2 dummy
    lda     sample_out            ;3
    bne     set_speaker           ;3 jump always
.speaker_on
    adc     #$ff                  ;2
    sta     ch_acc                ;3
    lda     #SPEAKER_ON           ;2
.set_speaker
    sta     SHEILA_MISC_CONTROL   ;4
    ;22

    dex                           ;2
    bne     sound_loop            ;2/3
    ;~5

    ;(37)+93+22+5 = (37)+120

; ------------------------------------------------------------------------------------------------

    dey
    lda     (sample_ptr),y        ;it's okay if sample_ptr is not valid
    cmp     #21
    bne     sample_no_stop

    lda     #0                    ;disable sample reading
    sta     sample_mask

.sample_no_stop

    tya
    sec                           ;(!)
    adc     sample_ptr+0
    sta     sample_ptr+0
    bcc     L13
    inc     sample_ptr+1
.L13
    dec     row_length
    beq     L14
    jmp     sound_loop_0
.L14
    jmp     play_loop

.sample_list_lo
    equb    lo(sample_1)
    equb    lo(sample_2)
    equb    lo(sample_3)
    equb    lo(sample_4)
    equb    lo(sample_5)
    equb    lo(sample_6)
    equb    lo(sample_7)

.sample_list_hi
    equb    hi(sample_1)
    equb    hi(sample_2)
    equb    hi(sample_3)
    equb    hi(sample_4)
    equb    hi(sample_5)
    equb    hi(sample_6)
    equb    hi(sample_7)

    INCLUDE "tracks\shiru.lets_go.track.6502"

.end

SAVE "MAIN",start,end

\ ******************************************************************
\ *    Memory Info
\ ******************************************************************

PRINT "-----------------------"
PRINT "  1-BIT SQUATM PLAYER  "
PRINT "-----------------------"
PRINT "CODE size       = ", ~end-start
PRINT "-----------------------"
PRINT "HIGH WATERMARK  = ", ~P%
PRINT "FREE            = ", ~start+end
PRINT "-----------------------"

\ ******************************************************************
\ * Supporting Files
\ ******************************************************************

PUTBASIC "loader.bas","LOADER"
PUTFILE  "screens\bgrnd.bin","BGRND",&5800
PUTFILE  "BOOT","!BOOT",&FFFF